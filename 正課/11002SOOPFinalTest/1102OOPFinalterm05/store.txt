#pragma once
#define _CRT_NONSTDC_NO_WARNINGS
#define _CRT_SECURE_NO_WARNINGS
#include <cstring>
#include <string>
#include <vector>
#include <algorithm>
#include <iostream>
#include <set>
#include <map>
#include <iomanip>

std::vector<std::string> split_string(const char* _String, const char* _Delimiter)
{
    char* copy = strdup(_String);
    char* ptr = std::strtok(copy, _Delimiter);
    std::vector<std::string> names;
    while (ptr != NULL)
    {
        names.push_back(ptr);
        ptr = strtok(NULL, _Delimiter);
    }
    delete copy;
    return names;
}

std::string join_string(std::vector<std::string> _Vector, const char* _Delimiter)
{
    if (_Vector.size() == 0)
    {
        return "";
    }
    std::string retval = _Vector[0];
    for (auto i = _Vector.begin() + 1; i != _Vector.end(); ++i) {
        retval += _Delimiter + *i;
    }
    return retval;
}

enum class ItemType : int { _Base, _Product, _Combo };


class Item {
public:
    int price;
    std::string name;
    Item() {
        price = 0;
    }
    ItemType item_type = ItemType::_Base;
    void Print() {}
};

class Combo;

class Product : public Item
{
public:
    Product(const char* name, int price)
    {
        this->name = name;
        this->price = price;
        this->item_type = ItemType::_Product;
    }
    friend Combo operator+(Product& p1, Product& p2);
    bool operator<(const Product& rhs) const { // for sorting & set
        return this->name < rhs.name;
    }
    void Print() {
        std::cout << this->name << std::setw(20LL - this->name.size()) << this->price << std::endl;
    }
};

class Combo : public Item
{
public:
    int total;
    std::vector<Product> products;
    Combo()
    {
        this->price = -1;
        this->total = 0;
        this->item_type = ItemType::_Combo;
    }
    void Add(Product& product)
    {
        this->products.push_back(product);
        std::stable_sort(this->products.begin(), this->products.end());
        for (unsigned int i = 0; i < this->products.size(); ++i)
        {
            if (i == 0)
            {
                this->name = this->products[i].name;
            }
            else
            {
                this->name += "+" + this->products[i].name;
            }
        }
        this->total += product.price;
    }
    void SetPrice(int price)
    {
        this->price = price;
    }
    Combo operator+(Product& product)
    {
        Combo combo = *this;
        combo.Add(product);
        combo.price = -1;
        return combo;
    }
    int discount()
    {
        return total - price;
    }
    bool operator<(const Combo& rhs) const {
        return this->name < rhs.name;
    }
    bool operator<(Combo& rhs)
    {
        return this->price < rhs.price;
    }
    void Print() {
        for (auto& product : products) {
            product.Print();
        }
        std::cout << "Discount" << std::setw(12) << -this->discount() << std::endl;
    }
    std::vector<int> Match(std::vector<const Item*> items) {
        std::map<std::string, int> counter;
        std::vector<int> result;
        int num_products = 0;
        for (auto& p : this->products) {
            counter[p.name]++;
            num_products++;
        }
        int total = items.size();
        for (int i = 0; i < total; ++i) {
            Item item = *items[i];
            if (counter[item.name] > 0) {
                counter[item.name]--;
                result.push_back(i);
                num_products--;
            }
        }
        if (num_products != 0) result.clear();
        return result;
    }
};

Combo operator+(Product& p1, Product& p2) {
    Combo combo;
    combo.Add(p1);
    combo.Add(p2);
    combo.item_type = ItemType::_Combo;
    return combo;
}
class Store
{
public:
    std::set<Product> products;
    std::set<Combo> combinations;
    std::vector<const Item*> shopping_list;
    Store() {};
    void Add(Product product)
    {
        products.insert(product);
    }
    void Add(Combo combo)
    {
        bool flag = true;
        for (auto& product : combo.products)
        {
            if (this->products.find(product) == this->products.end()) {
                flag = false;
                break;
            }
        }
        if (!flag)
        {
            std::cout << "Product not exist." << std::endl;
        }
        else if (combo.price < 0)
        {
            std::cout << "The combination has no set price." << std::endl;
        }
        else
        {
            combinations.insert(combo);
        }
    }
    void Buy(const char* name)
    {
        std::vector<std::string> combo_products = split_string(name, "+");
        std::stable_sort(combo_products.begin(), combo_products.end());
        std::string item_name = join_string(combo_products, "+");
        if (combo_products.size() == 1) // is product
        {
            for (auto& i : this->products) {
                if (i.name == item_name) {
                    shopping_list.push_back(&i);
                    return;
                }
            }
        }
        else
        {
            for (auto& i : this->combinations) {
                if (i.name == item_name) {
                    shopping_list.push_back(&i);
                    return;
                }
            }
        }
        std::cout << name << " is not in store." << std::endl;
    }
    std::map<std::string, int> GetItemCountMap() {
        std::map<std::string, int> counter;
        for (auto& i : shopping_list) {
            counter[i->name] += 1;
        }
        return counter;
    }
    void PrintReceipt_impl(void* point_perm, int num_perm, int num_item)
    {
        int* perm = (int*)point_perm;
        std::vector<Combo> combos(this->combinations.begin(), this->combinations.end());
        int best_discount = 0;
        std::vector<Combo> best_candidates;
        for (int i = 0; i < num_perm; ++i) {
            int perm_discount = 0;
            std::vector<Combo> candidates;
            std::vector<Combo> perm_combo;
            for (int j = 0; j < num_item; ++j) {
                perm_combo.push_back(combos[perm[i * num_item + j]]);
            }
            auto items = this->GetItemCountMap();
            for (auto& combo : perm_combo) {
                while (true) {
                    bool enough = true;
                    for (auto& product : combo.products) {
                        if (items[product.name] < 1) {
                            enough = false;
                            break;
                        }
                    }
                    if (enough) {
                        for (auto& product : combo.products) {
                            items[product.name]--;
                        }
                        perm_discount += combo.discount();
                        candidates.push_back(combo);
                    }
                    else {
                        break;
                    }
                }
            }
            if (perm_discount > best_discount) {
                best_discount = perm_discount;
                best_candidates = perm_combo;
            }
        }
        std::vector<const Item*> result;
        for (auto& item : this->shopping_list) {
            result.push_back(item);
            for (auto& candidate : best_candidates) {
                std::vector<int> match = candidate.Match(result);
                if (match.size() > 0) {
                    result[*match.rbegin()] = &candidate;
                    for (auto index = match.rbegin() + 1; index != match.rend(); index++) {
                        result.erase(result.begin() + *index);
                    }
                }
            }
        }
        int price = 0;
        std::cout << "      Receipt       " << std::endl;
        std::cout << "====================" << std::endl;
        for (auto& item : result) {
            if (item->item_type == ItemType::_Product) {
                ((Product*)item)->Print();
            }
            else if (item->item_type == ItemType::_Combo) {
                ((Combo*)item)->Print();
            }
            price += item->price;
        }
        std::cout << "====================" << std::endl;
        std::cout << "Total" << std::setw(15) << price << std::endl;
        this->shopping_list.clear();
    }
    void PrintReceipt()
    {
        int perm_v1[][1] = { {0} };
        int perm_v2[][2] = { {0, 1}, {1, 0} };
        int perm_v3[][3] = { {0, 1, 2}, {0, 2, 1}, {1, 0, 2}, {1, 2, 0}, {2, 0, 1}, {2, 1, 0} };
        int num_combos = this->combinations.size();
        if (num_combos == 1) {
            this->PrintReceipt_impl(perm_v1, 1, 1);
        }
        else if (num_combos == 2) {
            this->PrintReceipt_impl(perm_v2, 2, 2);
        }
        else if (num_combos == 3) {
            this->PrintReceipt_impl(perm_v3, 6, 3);
        }
        else {
            this->PrintReceipt_impl(NULL, 0, 0);
        }
    }
};